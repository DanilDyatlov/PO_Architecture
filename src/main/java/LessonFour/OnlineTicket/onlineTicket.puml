@startuml

' Интерфейсы
interface UserActions {
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean
}

interface TicketActions {
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
}

' Классы и операции

class User implements UserActions {
' Предусловие
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean

' Постусловие
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
}

' Абстрактный класс и наследование

abstract class Ticket implements TicketActions {
' Методы для билетов
  +routeId: String
  +departureTime: DateTime
  +price: Money
}

User --|> BusTicket : uses

' Отношение между классом. Юзер имеет связь. Реализует класс тикет. Юзер наследник

class BusTicket extends Ticket {
  +number: int
  +routeId: String
  +departureTime: DateTime
  +price: Money
}
Ticket <|-- BusTicket : extends

' Предусловия.

User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()
User --> BusTicket : reserveTicket()

' Постусловия

User --> User : deductFunds()
User --> User : confirmPurchase()
User --> BusTicket : updateTicketAvailability()
User --> User : cancelReservation()

' Инварианты

' Сумма не может быть отрицательной
User --> User : [invariant] Funds >= busTicketPrice

' Цена билеты всегда больше 0
BusTicket ---> BusTicket : [invariant] Price > 0
Ticket --> Ticket : [invariant] Price > 0
@enduml
