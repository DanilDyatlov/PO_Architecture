package LessonFour.OnlineTicket;

/**
 * Метод BusTicket наследуется от родительского абстрактного класса Ticket,
 * Ticket реализует интерфейс TicketActions,
 * Метод BusTicket переопределяет действие с билетами.
 */
class BusTicket extends Ticket {
    int number;

    /**
     * Метод для бронирования билетов:
     * @pre Количество билетов в продаже должно быть больше или равно запрошенным пользователем.
     * @post Количество билетов должно уменьшиться во время бронирования билета
     * @return fasle если не выполняется предусловия или выдает ошибку
     */
    @Override
    public boolean reserveTicket() {
        // Реализация метода
        return false;
    }

    /**
     * Метод для списания средства:
     * @pre Средств должно быть больше или равно стоимости билетов,
     * @pre Доступные билеты для бронирования,
     * @post Средства должны быть зарезервироваться для оплаты билета,
     * @return fasle если не выполняется предусловия, либо нет доступных билетов для покупки
     */
    @Override
    public boolean deductFunds() {
        // Реализация метода
        return false;
    }

    /**
     * Метод для подтверждения бронирования/покупки билета:
     * @pre Успешное списание средств и бронирование свободного билета,
     * @post Создание электронного билета,
     * @post Формирование чека по оплате,
     * @post Отправить на почту электронные билеты,
     * @post Открыть возможность об изменении/отмене билета,
     * @return fasle если не выполняются одни из условий, либо ошибка ввода.
     */
    @Override
    public boolean confirmPurchase() {
        // Реализация метода
        return false;
    }

    /**
     * Метод для обновления доступных билетов:
     * @pre Корректное выполнение метода reserveTicket,
     * @pre Проверка на количество мест в автобусе и количеством купленных/свободных билетов
     * @post Обновить количество активных билетов к продаже
     * @return fasle если не выполняются одни из условий, либо ошибка ввода.
     */
    @Override
    public void updateTicketAvailability() {
        // Реализация метода
    }

    /**
     * Метод для отмены бронирования:
     * @pre Количество билетов меньше запрошенного,
     * @pre Успешно произведена покупка билета,
     * @pre Уточнение причины отмены билета,
     * @post Отменить резерв билетов,
     * @post Оформить возврат денежных средств
     * @post Отправить на почту письмо с информацией об отмене билета,
     * @return fasle если не выполняются одни из условий, либо ошибка ввода.
     */
    @Override
    public boolean cancelReservation() {
        // Реализация метода
        return false;
    }
}
